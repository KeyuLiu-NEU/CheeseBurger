/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.WarehouseRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.WarehouseOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AssistantMedicineRequest;
import Business.WorkQueue.DoctorMedicineRequest;
import Business.WorkQueue.MedicalDeviceWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class WarehouseWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private WarehouseOrganization warehouseOrganization;
    private Network network;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public WarehouseWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business, Network network) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.warehouseOrganization = (WarehouseOrganization)organization;
        this.network = network;
        populateMedicalDeviceTable();
        populateMedicineTable();
        populateMedicineNum();
        populateMedicalDeviceNum();
    }
    
    public void populateMedicalDeviceTable(){
        DefaultTableModel model = (DefaultTableModel)medicalDeviceRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : network.getWorkQueue().getWorkRequestList()){
            if(request.getType().equals(WorkRequest.Type.MedicalDevice.getValue())){
                Object[] row = new Object[7];
                row[0] = request;
                row[1] = request.getSender().getEmployee().getName();
                row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                row[3] = request.getStatus();
                row[4] = request.getType();
                row[5] = ((MedicalDeviceWorkRequest)request).getMedicalDeviceANum();
                row[6] = ((MedicalDeviceWorkRequest)request).getMedicalDeviceBNum();
                model.addRow(row);
            }
        }

    }
    public void populateMedicineTable(){
        DefaultTableModel model = (DefaultTableModel)medicineRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : network.getWorkQueue().getWorkRequestList()){
            if(request.getType().equals(WorkRequest.Type.DoctorMedicine.getValue())){
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getSender().getEmployee().getName();
                row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                row[3] = request.getStatus();
                row[4] = request.getType();
                model.addRow(row);
            }
        }

    }
    public void populateMedicineNum(){
        valueALabel.setText(this.warehouseOrganization.getMedicineANum()+"");
        valueBLabel.setText(this.warehouseOrganization.getMedicineBNum()+"");
        valueCLabel.setText(this.warehouseOrganization.getMedicineCNum()+"");
    }
    
    public void populateMedicalDeviceNum(){
        valueDeviceALabel.setText(this.network.getMedicalDeviceA()+"");
        valueDeviceBLabel.setText(this.network.getMedicalDeviceB()+"");
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        medicalDeviceRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processMedicalDeviceJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        allocateMedicineToDoctorJButton = new javax.swing.JButton();
        allocateMedicineToAssistantJButton = new javax.swing.JButton();
        valueCLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        valueBLabel = new javax.swing.JLabel();
        valueALabel = new javax.swing.JLabel();
        addMedicineCButton = new javax.swing.JButton();
        addMedicineAButton = new javax.swing.JButton();
        addMedicineBButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        valueDeviceBLabel = new javax.swing.JLabel();
        valueDeviceALabel = new javax.swing.JLabel();
        addMedicalDeviceAButton = new javax.swing.JButton();
        addMedicalDeviceBButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        medicineRequestJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        medicalDeviceRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Type", "DeviceA", "DeviceB"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(medicalDeviceRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 100, 490, 96));

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, -1));

        processMedicalDeviceJButton.setText("Allocate Medical Device");
        processMedicalDeviceJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processMedicalDeviceJButtonActionPerformed(evt);
            }
        });
        add(processMedicalDeviceJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 330, -1, -1));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        allocateMedicineToDoctorJButton.setText("Allocate Medicine to Doctor");
        allocateMedicineToDoctorJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allocateMedicineToDoctorJButtonActionPerformed(evt);
            }
        });
        add(allocateMedicineToDoctorJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, -1, -1));

        allocateMedicineToAssistantJButton.setText("Allocate Medicine to Assistant");
        allocateMedicineToAssistantJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allocateMedicineToAssistantJButtonActionPerformed(evt);
            }
        });
        add(allocateMedicineToAssistantJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, -1, -1));

        valueCLabel.setText("ValueC");
        add(valueCLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, -1, -1));

        jLabel2.setText("Medicine A");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, -1, -1));

        jLabel3.setText("Medicine B");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, -1, -1));

        jLabel4.setText("Medicine C");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, -1, -1));

        valueBLabel.setText("ValueB");
        add(valueBLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, -1, 20));

        valueALabel.setText("ValueA");
        add(valueALabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, -1, -1));

        addMedicineCButton.setText("Add C");
        addMedicineCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMedicineCButtonActionPerformed(evt);
            }
        });
        add(addMedicineCButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 320, -1, -1));

        addMedicineAButton.setText("Add A");
        addMedicineAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMedicineAButtonActionPerformed(evt);
            }
        });
        add(addMedicineAButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, -1, -1));

        addMedicineBButton.setText("Add B");
        addMedicineBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMedicineBButtonActionPerformed(evt);
            }
        });
        add(addMedicineBButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, -1, -1));

        jLabel5.setText("Device A");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 270, -1, -1));

        jLabel6.setText("Device B");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 300, -1, -1));

        valueDeviceBLabel.setText("ValueB");
        add(valueDeviceBLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 300, -1, 20));

        valueDeviceALabel.setText("ValueA");
        add(valueDeviceALabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 270, -1, -1));

        addMedicalDeviceAButton.setText("Add A");
        addMedicalDeviceAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMedicalDeviceAButtonActionPerformed(evt);
            }
        });
        add(addMedicalDeviceAButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 260, -1, -1));

        addMedicalDeviceBButton.setText("Add B");
        addMedicalDeviceBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMedicalDeviceBButtonActionPerformed(evt);
            }
        });
        add(addMedicalDeviceBButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 300, -1, -1));

        medicineRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(medicineRequestJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 375, 96));

        jLabel1.setText("Medicine");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));

        jLabel7.setText("Medical Device");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 80, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = medicalDeviceRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        WorkRequest request = (WorkRequest)medicalDeviceRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populateMedicalDeviceTable();
        
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processMedicalDeviceJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processMedicalDeviceJButtonActionPerformed
        
        int selectedRow = medicalDeviceRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        MedicalDeviceWorkRequest request = (MedicalDeviceWorkRequest)medicalDeviceRequestJTable.getValueAt(selectedRow, 0);
     
        request.setStatus("Processing");
        request.getSender().setMedicalDeviceStatus(Boolean.TRUE);
        
        ProcessMedicalDeviceRequestJPanel processWorkRequestJPanel = new ProcessMedicalDeviceRequestJPanel(userProcessContainer, request);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_processMedicalDeviceJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateMedicalDeviceTable();
        populateMedicineTable();
        populateMedicineNum();
        populateMedicalDeviceNum();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void allocateMedicineToDoctorJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allocateMedicineToDoctorJButtonActionPerformed
                
        int selectedRow = medicalDeviceRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        DoctorMedicineRequest request = (DoctorMedicineRequest)medicalDeviceRequestJTable.getValueAt(selectedRow, 0);
     
        request.setStatus("Processing");
        
        AllocateMedicineToDoctorJPanel processWorkRequestJPanel = new AllocateMedicineToDoctorJPanel(userProcessContainer, request);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_allocateMedicineToDoctorJButtonActionPerformed

    private void allocateMedicineToAssistantJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allocateMedicineToAssistantJButtonActionPerformed
                int selectedRow = medicalDeviceRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        AssistantMedicineRequest request = (AssistantMedicineRequest)medicalDeviceRequestJTable.getValueAt(selectedRow, 0);
     
        request.setStatus("Processing");
        
        AllocateMedicineToAssistantJPanel processWorkRequestJPanel = new AllocateMedicineToAssistantJPanel(userProcessContainer, request);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_allocateMedicineToAssistantJButtonActionPerformed

    private void addMedicineCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMedicineCButtonActionPerformed
        this.warehouseOrganization.medicineCPlusOne();
        populateMedicineNum();
    }//GEN-LAST:event_addMedicineCButtonActionPerformed

    private void addMedicineAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMedicineAButtonActionPerformed
        this.warehouseOrganization.medicineAPlusOne();
        populateMedicineNum();
    }//GEN-LAST:event_addMedicineAButtonActionPerformed

    private void addMedicineBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMedicineBButtonActionPerformed
        this.warehouseOrganization.medicineBPlusOne();
        populateMedicineNum();
    }//GEN-LAST:event_addMedicineBButtonActionPerformed

    private void addMedicalDeviceAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMedicalDeviceAButtonActionPerformed
        this.network.medicalDeviceAPlusOne();
        populateMedicalDeviceNum();
    }//GEN-LAST:event_addMedicalDeviceAButtonActionPerformed

    private void addMedicalDeviceBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMedicalDeviceBButtonActionPerformed
        this.network.medicalDeviceBPlusOne();
        populateMedicalDeviceNum();
    }//GEN-LAST:event_addMedicalDeviceBButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMedicalDeviceAButton;
    private javax.swing.JButton addMedicalDeviceBButton;
    private javax.swing.JButton addMedicineAButton;
    private javax.swing.JButton addMedicineBButton;
    private javax.swing.JButton addMedicineCButton;
    private javax.swing.JButton allocateMedicineToAssistantJButton;
    private javax.swing.JButton allocateMedicineToDoctorJButton;
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable medicalDeviceRequestJTable;
    private javax.swing.JTable medicineRequestJTable;
    private javax.swing.JButton processMedicalDeviceJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JLabel valueALabel;
    private javax.swing.JLabel valueBLabel;
    private javax.swing.JLabel valueCLabel;
    private javax.swing.JLabel valueDeviceALabel;
    private javax.swing.JLabel valueDeviceBLabel;
    // End of variables declaration//GEN-END:variables
}
